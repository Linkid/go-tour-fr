Plus de types : structs, slices, et maps.
Apprenez à définir des types basés sur ceux qui existent déjà : cette leçon couvre les structures, tableaux (arrays), tranches et cartes.

Les auteurs de Go
https://golang.org

* Pointeurs

Go comporte des pointeurs.
Un pointeur contient l'adresse mémoire d'une valeur.

Le type `*T` est un pointeur vers une valeur de `T`. Sa valeur zéro est `nil`.

	var p *int

L'opérateur `&` génère un pointeur vers son opérande.

	i := 42
	p = &i

L'opérateur `*` dénote la valeur sous-jacente du pointeur.

	fmt.Println(*p) // lire i par le pointeur p
	*p = 21         // définir i par le pointeur p

Ceci est connu en tant que « déréférencement » ou « indirection ».

Contrairement à C, Go n'a aucune arithmétique de pointeur.

.play moretypes/pointers.go

* Structures

Une `struct` est une collection de champs.

.play moretypes/structs.go

* Champs struct

les champs de la structure sont accessibles à l'aide d'un point.

.play moretypes/struct-fields.go

* Les pointeurs vers des structs

Les champs struct peuvent être accessibles via un pointeur de struct.

Pour accéder au champ `X` d'une structure lorsque nous avons le pointeur de structure `p` nous pouvons
écrire `(*p).X`.
Cependant, cette notation est verbeuse, donc le langage nous permet à la place
d'écrire juste `p.X`, sans la déréférence explicite.

.play moretypes/struct-pointers.go

* Struct littéraux

Une structure littéral dénote une valeur de structure nouvellement allouée en énumérant les valeurs de ses champs.

Vous pouvez lister seulement un sous-ensemble de champs en utilisant la syntaxe `Nom:`. (Et l'ordre des champs nommés n'est pas pertinent.)

Le préfixe spécial `&` construit un pointeur vers la valeur struct.

.play moretypes/struct-literals.go


* Tableaux (Arrays)

Le type `[n]T` est un tableau de `n` ayant des valeurs de type `T`.

L'expression

	var a [10]int

déclare une variable `a` comme un tableau de dix entiers.

La longueur d'un tableau fait partie de son type, de sorte que les tableaux ne peuvent pas être redimensionnés.
Cela semble limitatif, mais ne vous inquiétez pas ;
Go offre un moyen pratique de travailler avec des tableaux.

.play moretypes/array.go


* Tranches (Slices)

Un tableau a une taille fixe.
Une tranche, en revanche, est de taille dynamique,
une vue flexible dans les éléments d'un tableau.
En pratique, les tranches sont beaucoup plus courantes que les tableaux.

Le type `[]T` est une tranche avec des éléments de type `T`.

Une tranche est formée en spécifiant deux indices, une limite basse et
une limite haute, séparés par deux-points:

	a[low : high]

Cela sélectionne une plage semi-ouverte qui inclut le premier
élément, mais exclut le dernier.

L'expression suivante crée une tranche qui comprend
les éléments 1 à 3 de `a`:

	a[1:4]

.play moretypes/slices.go


* Les tranches sont comme des références à des tableaux

Une tranche ne stocke aucune donnée,
il décrit simplement une section d'un tableau sous-jacent.

La modification des éléments d'une tranche modifie la
éléments correspondants de son tableau sous-jacent.

Les autres tranches qui partagent le même tableau sous-jacent verront ces modifications.

.play moretypes/slices-pointers.go


* Tranches littéraux

Un littéral de tranche est comme un littéral de tableau sans la longueur.

Il s'agit d'un littéral de tableau:

	[3]bool{true, true, false}

Et cela crée le même tableau que ci-dessus,
puis crée une tranche qui y fait référence:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Valeurs par défaut des tranches

Lors du découpage, vous pouvez omettre les limites hautes ou basses pour utiliser leurs valeurs par défaut à la place.

La valeur par défaut est zéro pour la limite inférieure et la longueur de la tranche pour la limite supérieure.

Pour le tableau

	var a [10]int

ces expressions de tranche sont équivalentes:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Slice length and capacity

A slice has both a _length_ and a _capacity_.

The length of a slice is the number of elements it contains.

The capacity of a slice is the number of elements in the underlying array,
counting from the first element in the slice.

The length and capacity of a slice `s` can be obtained using the expressions
`len(s)` and `cap(s)`.

You can extend a slice's length by re-slicing it,
provided it has sufficient capacity.
Try changing one of the slice operations in the example program to extend it
beyond its capacity and see what happens.

.play moretypes/slice-len-cap.go


* Tranches nulles

La valeur nulle d'une tranche est `nil`.

Une tranche possède une longueur et une capacité de zéro
et n'a pas de tableau sous-jacent.

.play moretypes/nil-slices.go


* Création d'une Tranche avec make

Les tranches peuvent être créées avec la fonction intégrée `make`;
c'est ainsi que vous créez des tableaux de taille dynamique.

La fonction `make` alloue un tableau mis à zéro
et renvoie une tranche qui fait référence à ce tableau:

	a := make([]int, 5)  // len(a)=5

Pour spécifier une capacité, passer un troisième argument à `make` :

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Tranches de tranches

Les tranches peuvent contenir tout type, y compris d'autres tranches.

.play moretypes/slices-of-slice.go


* Ajouter à une tranche

Il est courant d'ajouter de nouveaux éléments à une tranche, et ainsi Go offre une fonction intégrée
`append`. La [[https://golang.org/pkg/builtin/#append][documentation]]
du paquet intégré décrit `append`.

	func append(s []T, vs ...T) []T

Le premier paramètre `s` de `append` est une tranche de type `T`, et le reste sont des
valeurs `T` à ajouter à la tranche.

La valeur résultante de `append` est une tranche contenant tous les éléments de la tranche original
et les valeurs fournis.

Si le tableau de support de `s` est trop petit pour contenir toutes les valeurs données un plus gros
tableau sera alloué. La tranche retourné pointera vers le tableau nouvellement
allouée.

(Pour en apprendre plus sur les tranches, lire l'article [[https://blog.golang.org/go-slices-usage-and-internals][Tranches : utilisation et fonctionnement interne]].)

.play moretypes/append.go


* Gamme (Range)

La forme `range` de la boucle `for` effectue une itération sur une tranche ou une carte.

Lors de l'itération sur une tranche, deux valeurs sont renvoyées pour chaque itération.
Le premier est l'indice, et la seconde est une copie de l'élément à cet indice.

.play moretypes/range.go

* Gamme poursuivi

Vous pouvez sauter l'indice ou la valeur en attribuant à `_`.

    for i, _ := range pow
    for _, value := range pow

Si vous ne voulez que l'index, vous pouvez omettre la deuxième variable.

    for i := range pow

.play moretypes/range-continued.go

* Exercice : Tranches

Mettre en œuvre `Pic`. Elle doit retourner une tranche de longueur `dy`, dont chaque élément est une tranche de `dx` d'entiers non signés 8 bits. Lorsque vous exécutez le programme, il affiche votre image, l'interprétation des nombres en  valeurs de niveaux de gris (enfin, Bluescale).

Le choix de l'image est libre. Les Fonctions intéressantes incluent `(x+y)/2`, `x*y` and `x^y`.

(Vous devez utiliser une boucle pour allouer chacun des `[]uint8` à l'intérieur des `[][]uint8`).

(Utiliser `uint8(intValue)` pour convertir entre les types.)

.play moretypes/exercise-slices.go

* Cartes (Maps)

Une carte associe clés et valeurs.

La valeur zéro d'une carte est `nil`.
Une carte `nil` n'a pas de clés, et aucune clé ne peut être ajoutée.

La fonction `make` retourne une carte du type donné,
initialisé et prêt à l'emploi.

.play moretypes/maps.go

* Carte littéraux (Map literals)

Carte littéraux sont comme des littéraux de struct, mais les clés sont nécessaires.

.play moretypes/map-literals.go

* Carte littéraux continué

Si le type de haut-niveau est juste un nom de type, vous pouvez l'omettre des éléments du littéral.

.play moretypes/map-literals-continued.go

* Mutation de Cartes (Mutating Maps)

Insérer ou mettre à jour un élément de carte `m` :

	m[key] = elem

Récupérer un élément :

	elem = m[key]

Supprimer un élément :

	delete(m, key)

Test qu'une clé est présente avec une affectation de deux valeurs :

	elem, ok = m[key]

Si `key` est dans `m`,`ok` est `true`. Sinon, `ok` est `false`

Si `key` n'est pas dans la carte, alors `elem` est la valeur zéro pour le type d'élément de la carte.

*Note*:* si `elem` ou `ok` ont pas encore été déclarée, vous pouvez utiliser une déclaration courte :

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Exercice : Cartes

Mettre en œuvre `WordCount`. Elle doit retourner une carte des comptes de chaque «mot» dans la chaîne `s`. La fonction `wc.Test` exécute une série de tests contre la fonction fournie et imprime le succès ou l'échec.

Vous trouverez peut-être [[https://golang.org/pkg/strings/#Fields][strings.Fields]] utile.

.play moretypes/exercise-maps.go

* Les valeurs de fonction

Les fonctions sont aussi des valeurs. Elles peuvent être passés comme toutes autres valeurs.

Les valeurs de fonction peuvent être utilisées comme arguments de fonction et des valeurs de retour.

.play moretypes/function-values.go

* Fermetures de fonction (Closures)

Les fonctions de Go peuvent être des fermetures. Une fermeture  est une valeur de la fonction qui fait référence à des variables à partir de l'extérieur de son corps. La fonction peut accéder et assigner aux variables référencées, dans ce sens, la fonction est «lié» aux variables.

Par exemple, la fonction de `adder` renvoie une fermeture. Chaque fermeture est liée à sa propre variable `sum`.

.play moretypes/function-closures.go

* Exercice : fermeture Fibonacci

Amusons-nous avec les fonctions.

Mettre en œuvre une fonction `Fibonacci` qui renvoie une fonction (une fermeture) qui
renvoie [[https://fr.wikipedia.org/wiki/Suite_de_Fibonacci][La suite de Fibonacci]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Félicitations !

Vous avez terminé cette leçon !

Vous pouvez revenir à la liste des [[/list][modules]] pour trouver ce qu'il faut apprendre à côté, ou continuer avec la [[javascript:click('.next-page')][leçon suivante]].
